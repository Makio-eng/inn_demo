@use "sass:math";

/* ブレークポイント*/
$breakpoint: (
  sp: "screen and (max-width:767px)",
  tab: "screen and (min-width:768px) and (max-width:1279px)",
  pc: "screen and (min-width:1280px)",
);
@mixin mq($bp) {
  @media #{map-get($breakpoint,$bp)} {
    @content;
  }
}
@function rem($px) {
  @return calc($px / 16) * 1rem;
}
@mixin border {
  border: 1px solid #707070;
}

// LineHeight余白除去
@mixin lineHeight($line-height) {
  line-height: $line-height;
  &::before,
  &::after {
    content: "";
    display: block;
    width: 0;
    height: 0;
  }
  &::before {
    margin-top: calc((1 - #{$line-height}) * 0.5em); //文字上の余白を消す
  }
  &::after {
    margin-bottom: calc((1 - #{$line-height}) * 0.5em); //文字下の余白を消す
  }
}

// clamp計算
@function responsiveSizeClamp(
  $minFontSize,
  $maxFontSize,
  $minViewport,
  $maxViewport
) {
  $fontSizeRate: $maxFontSize - $minFontSize;
  $viewportRate: $maxViewport - $minViewport;

  $changingSize: math.div(
    math.round(math.div($fontSizeRate, $viewportRate) * 10000),
    100
  );
  $fixedSize: math.div(
    math.round(
      ($minFontSize - math.div($fontSizeRate, $viewportRate) * $minViewport) *
        62.5
    ),
    1000
  );
  $minRemFontSize: math.div(math.round($minFontSize * 62.5), 1000);
  $maxRemFontSize: math.div(math.round($maxFontSize * 62.5), 1000);
  @return clamp(
    #{$minRemFontSize}rem,
    #{$fixedSize}rem + #{$changingSize}vw,
    #{$maxRemFontSize}rem
  );
}
